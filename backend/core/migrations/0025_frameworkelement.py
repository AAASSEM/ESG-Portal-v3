# Generated by Django 4.2.7 on 2025-09-14 04:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0024_populate_site_in_data_submissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='FrameworkElement',
            fields=[
                ('framework_id', models.CharField(help_text='Framework this element belongs to', max_length=100)),
                ('sector', models.CharField(help_text='Target sector (e.g., hospitality, generic)', max_length=50)),
                ('official_code', models.CharField(help_text='Official framework code', max_length=100)),
                ('element_id', models.CharField(help_text='Unique element identifier', max_length=100, primary_key=True, serialize=False)),
                ('name_plain', models.CharField(help_text='Plain English name', max_length=300)),
                ('description', models.TextField(help_text='Detailed description of the requirement')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('cadence', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annual', 'Annual'), ('on_change', 'On Change'), ('on_installation', 'On Installation'), ('daily', 'Daily'), ('every_3_years', 'Every 3 Years'), ('on_implementation', 'On Implementation'), ('on_purchase', 'On Purchase'), ('on_menu_change', 'On Menu Change')], help_text='Reporting frequency', max_length=50)),
                ('type', models.CharField(choices=[('must-have', 'Must Have'), ('conditional', 'Conditional')], help_text='Element type', max_length=50)),
                ('category', models.CharField(choices=[('E', 'Environmental'), ('S', 'Social'), ('G', 'Governance')], help_text='ESG category', max_length=1)),
                ('condition_logic', models.TextField(blank=True, help_text='Conditions for this element to apply', null=True)),
                ('wizard_question', models.TextField(blank=True, help_text='Question to ask user to determine if element applies', null=True)),
                ('prompt', models.TextField(help_text='User-facing prompt for data collection')),
                ('metered', models.BooleanField(default=False, help_text='Whether this element requires meter readings')),
                ('meter_type', models.CharField(blank=True, choices=[('electricity', 'Electricity'), ('water', 'Water'), ('district_cooling', 'District Cooling'), ('fuel', 'Fuel'), ('waste', 'Waste'), ('refrigerant', 'Refrigerant')], max_length=50, null=True)),
                ('meter_scope', models.CharField(blank=True, choices=[('site', 'Site'), ('organization', 'Organization'), ('fleet', 'Fleet'), ('value_chain', 'Value Chain'), ('local_community', 'Local Community')], max_length=50, null=True)),
                ('calculation', models.TextField(blank=True, help_text='How to calculate this value', null=True)),
                ('aggregation', models.TextField(blank=True, help_text='How to aggregate across sites/time', null=True)),
                ('privacy_level', models.CharField(default='public', help_text='Data privacy classification', max_length=20)),
                ('evidence_requirements', models.JSONField(default=list, help_text='Required evidence types')),
                ('providers_by_emirate', models.JSONField(default=dict, help_text='Service providers by emirate')),
                ('data_source_systems', models.JSONField(default=list, help_text='Expected data source systems')),
                ('quality_checks', models.JSONField(default=list, help_text='Quality validation checks')),
                ('tags', models.JSONField(default=list, help_text='Element tags for filtering and search')),
                ('notes', models.TextField(blank=True, help_text='Additional implementation notes')),
                ('sources', models.JSONField(default=list, help_text='Reference sources and legislation')),
                ('carbon_specifications', models.JSONField(blank=True, help_text='Carbon calculation details', null=True)),
            ],
        ),
    ]
